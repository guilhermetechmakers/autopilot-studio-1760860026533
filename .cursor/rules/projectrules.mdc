---
alwaysApply: true
---

# Project Cursor Rules

This file contains project-specific development rules and guidelines.
These rules will be automatically applied when working in this project with Cursor.

## Design Pattern: ---

## Visual Style

### Color Palette:
- Primary background: Deep charcoal (#18181B)
- Secondary background: Slightly lighter dark gray (#232329)
- Surface/card background: Dark gray (#222228)
- Primary text: Soft white (#F4F4F5)
- Secondary text: Muted gray (#A1A1AA)
- Accent colors: 
  - Blue (#2563EB) for active/status indicators and buttons
  - Green (#22C55E) for complete/success statuses
  - Gray (#71717A) for draft/inactive states
- UI dividers and borders: Very dark gray (#27272A)
- Button and badge backgrounds use subtle, slightly lighter/darker shades of their accent colors for contrast
- Hover states: Light opacity overlay or slight lightening of component background

### Typography & Layout:
- Font Family: Modern geometric sans-serif (e.g., Inter, SF Pro, or similar)
- Font Weights: Regular (400), Medium (500), and SemiBold (600) for headings and key UI elements
- Hierarchy: 
  - Page titles large and bold
  - Subtitles/section headers smaller, lighter
  - Table and navigation text medium/light for readability
- Spacing: Generous vertical and horizontal padding (24-32px on containers, 12-16px within components)
- Alignment: Left-aligned for navigation and content; table columns aligned for scan-ability
- Consistent grid and modular layout; clear separation between sidebar, main content, and internal cards/tables

### Key Design Elements
#### Card Design:
- Flat, borderless containers with subtle shadow or light border for separation
- Rounded corners (6-8px radius)
- Minimal elevation; emphasis on clean grouping and whitespace
- Visual hierarchy within cards: bold headers, lighter body, accent badges for status

#### Navigation:
- Vertical sidebar with compact, icon-led navigation items
- Active state: highlighted background with accent border or bolder icon/text color
- Collapsible sub-sections (e.g., Products) indicated via arrow/chevron, expanding on click
- Sidebar uses slightly darker background for separation from main content

#### Data Visualization:
- Table/grid-heavy presentation with clear delineation between rows
- Status badges with filled backgrounds and clear color coding (blue, green, gray)
- Minimal, monochrome icons for data type or quick actions
- No chart/graph elements visible in this reference, but suggest clean, flat, color-coded data viz

#### Interactive Elements:
- Buttons: Rounded rectangles, solid fill for primary actions (e.g., Export, Filters), ghost/outline for secondary
- Badges: Small, pill-shaped, strong use of accent color backgrounds and white text
- Form elements: Minimal, borderless or low-contrast with subtle focus/hover states
- Hover effects: Light background changes or subtle shadow intensification
- Switches/toggles: Rounded, accent color fill when active
- Micro-interactions: Smooth, unobtrusive transitions for state changes and navigation

### Design Philosophy
This interface embodies:
- A modern, professional, and highly minimal aesthetic
- Emphasis on clarity, focus, and reducing cognitive load for technical/business users
- Clean, distraction-free visuals supporting dense information display and quick scan-ability
- Consistent, accessible contrast and clear interactive affordances
- User experience goals: speed, efficiency, and seamless navigation across complex workflows, with visual cues for status and actionability

---

This project follows the "---

## Visual Style

### Color Palette:
- Primary background: Deep charcoal (#18181B)
- Secondary background: Slightly lighter dark gray (#232329)
- Surface/card background: Dark gray (#222228)
- Primary text: Soft white (#F4F4F5)
- Secondary text: Muted gray (#A1A1AA)
- Accent colors: 
  - Blue (#2563EB) for active/status indicators and buttons
  - Green (#22C55E) for complete/success statuses
  - Gray (#71717A) for draft/inactive states
- UI dividers and borders: Very dark gray (#27272A)
- Button and badge backgrounds use subtle, slightly lighter/darker shades of their accent colors for contrast
- Hover states: Light opacity overlay or slight lightening of component background

### Typography & Layout:
- Font Family: Modern geometric sans-serif (e.g., Inter, SF Pro, or similar)
- Font Weights: Regular (400), Medium (500), and SemiBold (600) for headings and key UI elements
- Hierarchy: 
  - Page titles large and bold
  - Subtitles/section headers smaller, lighter
  - Table and navigation text medium/light for readability
- Spacing: Generous vertical and horizontal padding (24-32px on containers, 12-16px within components)
- Alignment: Left-aligned for navigation and content; table columns aligned for scan-ability
- Consistent grid and modular layout; clear separation between sidebar, main content, and internal cards/tables

### Key Design Elements
#### Card Design:
- Flat, borderless containers with subtle shadow or light border for separation
- Rounded corners (6-8px radius)
- Minimal elevation; emphasis on clean grouping and whitespace
- Visual hierarchy within cards: bold headers, lighter body, accent badges for status

#### Navigation:
- Vertical sidebar with compact, icon-led navigation items
- Active state: highlighted background with accent border or bolder icon/text color
- Collapsible sub-sections (e.g., Products) indicated via arrow/chevron, expanding on click
- Sidebar uses slightly darker background for separation from main content

#### Data Visualization:
- Table/grid-heavy presentation with clear delineation between rows
- Status badges with filled backgrounds and clear color coding (blue, green, gray)
- Minimal, monochrome icons for data type or quick actions
- No chart/graph elements visible in this reference, but suggest clean, flat, color-coded data viz

#### Interactive Elements:
- Buttons: Rounded rectangles, solid fill for primary actions (e.g., Export, Filters), ghost/outline for secondary
- Badges: Small, pill-shaped, strong use of accent color backgrounds and white text
- Form elements: Minimal, borderless or low-contrast with subtle focus/hover states
- Hover effects: Light background changes or subtle shadow intensification
- Switches/toggles: Rounded, accent color fill when active
- Micro-interactions: Smooth, unobtrusive transitions for state changes and navigation

### Design Philosophy
This interface embodies:
- A modern, professional, and highly minimal aesthetic
- Emphasis on clarity, focus, and reducing cognitive load for technical/business users
- Clean, distraction-free visuals supporting dense information display and quick scan-ability
- Consistent, accessible contrast and clear interactive affordances
- User experience goals: speed, efficiency, and seamless navigation across complex workflows, with visual cues for status and actionability

---" design pattern.
Ensure all implementations align with this pattern's best practices.

## Tech Stack Requirements

- **Framework:** React 18 with TypeScript
- **Build Tool:** Vite with SWC plugin
- **Styling:** Tailwind CSS v3 with CSS custom properties
- **UI Components:** Shadcn/ui with Radix UI primitives
- **Animations:** Motion library (NOT framer-motion)
- **Icons:** Lucide React
- **State Management:** TanStack React Query
- **Forms:** React Hook Form with Zod validation
- **HTTP Client:** Axios
- **Notifications:** Sonner

## Critical Setup Rules

1. **ALWAYS run `npm install` before any build commands**
2. Use Motion library for animations, NOT framer-motion
3. Import Inter font in index.css
4. Use Tailwind v3 with tailwind.config.js (not CSS-based config)
5. Use `@/` path aliases for imports
6. Use Shadcn components instead of custom UI components

## Code Style

- Write concise, technical TypeScript code
- Use functional and declarative patterns (avoid classes)
- Favor iteration and modularization over duplication
- Use descriptive variable names with auxiliary verbs (isLoading, hasError)
- Structure: exported components, subcomponents, helpers, types
- Minimize `useEffect` and `useState`; favor React Server Components where possible

## API Layer Pattern

- Centralize API calls in `src/api/` directory
- Use Axios with interceptors for auth and error handling
- Create React Query hooks in `src/hooks/`
- Implement proper error handling with toast notifications
- Use TypeScript types for all API responses

## Design System



---

## Design Reference (Complete Guidelines)

**This section contains the complete design guidelines for this project:**

# Modern Design Best Practices

## Philosophy

Create unique, memorable experiences while maintaining consistency through modern design principles. Every project should feel distinct yet professional, innovative yet intuitive.

---

## Landing Pages & Marketing Sites

### Hero Sections
**Go beyond static backgrounds:**
- Animated gradients with subtle movement
- Particle systems or geometric shapes floating
- Interactive canvas backgrounds (Three.js, WebGL)
- Video backgrounds with proper fallbacks
- Parallax scrolling effects
- Gradient mesh animations
- Morphing blob animations


### Layout Patterns
**Use modern grid systems:**
- Bento grids (asymmetric card layouts)
- Masonry layouts for varied content
- Feature sections with diagonal cuts or curves
- Overlapping elements with proper z-index
- Split-screen designs with scroll-triggered reveals

**Avoid:** Traditional 3-column equal grids

### Scroll Animations
**Engage users as they scroll:**
- Fade-in and slide-up animations for sections
- Scroll-triggered parallax effects
- Progress indicators for long pages
- Sticky elements that transform on scroll
- Horizontal scroll sections for portfolios
- Text reveal animations (word by word, letter by letter)
- Number counters animating into view

**Avoid:** Static pages with no scroll interaction

### Call-to-Action Areas
**Make CTAs impossible to miss:**
- Gradient buttons with hover effects
- Floating action buttons with micro-interactions
- Animated borders or glowing effects
- Scale/lift on hover
- Interactive elements that respond to mouse position
- Pulsing indicators for primary actions

---

## Dashboard Applications

### Layout Structure
**Always use collapsible side navigation:**
- Sidebar that can collapse to icons only
- Smooth transition animations between states
- Persistent navigation state (remember user preference)
- Mobile: drawer that slides in/out
- Desktop: sidebar with expand/collapse toggle
- Icons visible even when collapsed

**Structure:**
```
/dashboard (layout wrapper with sidebar)
  /dashboard/overview
  /dashboard/analytics
  /dashboard/settings
  /dashboard/users
  /dashboard/projects
```

All dashboard pages should be nested inside the dashboard layout, not separate routes.

### Data Tables
**Modern table design:**
- Sticky headers on scroll
- Row hover states with subtle elevation
- Sortable columns with clear indicators
- Pagination with items-per-page control
- Search/filter with instant feedback
- Selection checkboxes with bulk actions
- Responsive: cards on mobile, table on desktop
- Loading skeletons, not spinners
- Empty states with illustrations or helpful text

**Use modern table libraries:**
- TanStack Table (React Table v8)
- AG Grid for complex data
- Data Grid from MUI (if using MUI)

### Charts & Visualizations
**Use the latest charting libraries:**
- Recharts (for React, simple charts)
- Chart.js v4 (versatile, well-maintained)
- Apache ECharts (advanced, interactive)
- D3.js (custom, complex visualizations)
- Tremor (for dashboards, built on Recharts)

**Chart best practices:**
- Animated transitions when data changes
- Interactive tooltips with detailed info
- Responsive sizing
- Color scheme matching design system
- Legend placement that doesn't obstruct data
- Loading states while fetching data

### Dashboard Cards
**Metric cards should stand out:**
- Gradient backgrounds or colored accents
- Trend indicators (↑ ↓ with color coding)
- Sparkline charts for historical data
- Hover effects revealing more detail
- Icon representing the metric
- Comparison to previous period

---

## Color & Visual Design

### Color Palettes
**Create depth with gradients:**
- Primary gradient (not just solid primary color)
- Subtle background gradients
- Gradient text for headings
- Gradient borders on cards
- Elevated surfaces for depth

**Color usage:**
- 60-30-10 rule (dominant, secondary, accent)
- Consistent semantic colors (success, warning, error)
- Accessible contrast ratios (WCAG AA minimum)

### Typography
**Create hierarchy through contrast:**
- Large, bold headings (48-72px for heroes)
- Clear size differences between levels
- Variable font weights (300, 400, 600, 700)
- Letter spacing for small caps
- Line height 1.5-1.7 for body text
- Inter, Poppins, or DM Sans for modern feel

### Shadows & Depth
**Layer UI elements:**
- Multi-layer shadows for realistic depth
- Colored shadows matching element color
- Elevated states on hover
- Neumorphism for special elements (sparingly)

---

## Interactions & Micro-animations

### Button Interactions
**Every button should react:**
- Scale slightly on hover (1.02-1.05)
- Lift with shadow on hover
- Ripple effect on click
- Loading state with spinner or progress
- Disabled state clearly visible
- Success state with checkmark animation

### Card Interactions
**Make cards feel alive:**
- Lift on hover with increased shadow
- Subtle border glow on hover
- Tilt effect following mouse (3D transform)
- Smooth transitions (200-300ms)
- Click feedback for interactive cards

### Form Interactions
**Guide users through forms:**
- Input focus states with border color change
- Floating labels that animate up
- Real-time validation with inline messages
- Success checkmarks for valid inputs
- Error states with shake animation
- Password strength indicators
- Character count for text areas

### Page Transitions
**Smooth between views:**
- Fade + slide for page changes
- Skeleton loaders during data fetch
- Optimistic UI updates
- Stagger animations for lists
- Route transition animations

---

## Mobile Responsiveness

### Mobile-First Approach
**Design for mobile, enhance for desktop:**
- Touch targets minimum 44x44px
- Generous padding and spacing
- Sticky bottom navigation on mobile
- Collapsible sections for long content
- Swipeable cards and galleries
- Pull-to-refresh where appropriate

### Responsive Patterns
**Adapt layouts intelligently:**
- Hamburger menu → full nav bar
- Card grid → stack on mobile
- Sidebar → drawer
- Multi-column → single column
- Data tables → card list
- Hide/show elements based on viewport

---

## Loading & Empty States

### Loading States
**Never leave users wondering:**
- Skeleton screens matching content layout
- Progress bars for known durations
- Animated placeholders
- Spinners only for short waits (<3s)
- Stagger loading for multiple elements
- Shimmer effects on skeletons

### Empty States
**Make empty states helpful:**
- Illustrations or icons
- Helpful copy explaining why it's empty
- Clear CTA to add first item
- Examples or suggestions
- No "no data" text alone

---

## Unique Elements to Stand Out

### Distinctive Features
**Add personality:**
- Custom cursor effects on landing pages
- Animated page numbers or section indicators
- Unusual hover effects (magnification, distortion)
- Custom scrollbars
- Glassmorphism for overlays
- Animated SVG icons
- Typewriter effects for hero text
- Confetti or celebration animations for actions

### Interactive Elements
**Engage users:**
- Drag-and-drop interfaces
- Sliders and range controls
- Toggle switches with animations
- Progress steps with animations
- Expandable/collapsible sections
- Tabs with slide indicators
- Image comparison sliders
- Interactive demos or playgrounds

---

## Consistency Rules

### Maintain Consistency
**What should stay consistent:**
- Spacing scale (4px, 8px, 16px, 24px, 32px, 48px, 64px)
- Border radius values
- Animation timing (200ms, 300ms, 500ms)
- Color system (primary, secondary, accent, neutrals)
- Typography scale
- Icon style (outline vs filled)
- Button styles across the app
- Form element styles

### What Can Vary
**Project-specific customization:**
- Color palette (different colors, same system)
- Layout creativity (grids, asymmetry)
- Illustration style
- Animation personality
- Feature-specific interactions
- Hero section design
- Card styling variations
- Background patterns or textures

---

## Technical Excellence

### Performance
- Optimize images (WebP, lazy loading)
- Code splitting for faster loads
- Debounce search inputs
- Virtualize long lists
- Minimize re-renders
- Use proper memoization

### Accessibility
- Keyboard navigation throughout
- ARIA labels where needed
- Focus indicators visible
- Screen reader friendly
- Sufficient color contrast
- Respect reduced motion preferences

---

## Key Principles

1. **Be Bold** - Don't be afraid to try unique layouts and interactions
2. **Be Consistent** - Use the same patterns for similar functions
3. **Be Responsive** - Design works beautifully on all devices
4. **Be Fast** - Animations are smooth, loading is quick
5. **Be Accessible** - Everyone can use what you build
6. **Be Modern** - Use current design trends and technologies
7. **Be Unique** - Each project should have its own personality
8. **Be Intuitive** - Users shouldn't need instructions


---

### Quick Design Checklist

- [ ] Applied project color palette and typography from Design Reference above
- [ ] Implemented responsive breakpoints
- [ ] Added hover states and micro-interactions
- [ ] Used consistent spacing scale
- [ ] Ensured accessibility (keyboard nav, ARIA, contrast)

## Component Patterns

- Wrap all pages with animation components
- Use `cn()` utility for conditional classes
- Implement loading skeletons (not spinners)
- Create helpful empty states with illustrations
- Add error boundaries for robust error handling

## Performance & Best Practices

- Optimize images: WebP format, lazy loading
- Implement code splitting with dynamic imports
- Use proper memoization to minimize re-renders
- Debounce search inputs
- Virtualize long lists
- Respect prefers-reduced-motion

## Testing

- Write unit tests for components
- Mock API interactions in tests
- Test error scenarios and edge cases

---

For complete reference, see BUILD_GUIDE.md in the project root.
